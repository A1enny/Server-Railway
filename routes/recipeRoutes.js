const express = require("express");
const router = express.Router();
const db = require("../config/db.js");
const multer = require("multer");
const path = require("path");
const fs = require("fs");

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
const uploadDir = path.join(__dirname, "../uploads/recipes");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDir),
  filename: (req, file, cb) => cb(null, "recipe_" + Date.now() + path.extname(file.originalname)),
});

const upload = multer({ storage });

// ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£**
router.post("/", upload.single("image"), async (req, res) => {
  try {
    console.log("üìå Data received:", req.body);
    console.log("üìå Uploaded file:", req.file);

    let { recipe_name, category_id, ingredients } = req.body;

    if (!recipe_name || !category_id) {
      return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" });
    }

    let imagePath = req.file ? `/uploads/recipes/${req.file.filename}` : "/uploads/recipes/default.jpg";

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [result] = await db.query(
      "INSERT INTO recipes (recipe_name, category_id, image) VALUES (?, ?, ?)",
      [recipe_name, category_id, imagePath]
    );

    const recipeId = result.insertId;
    console.log("‚úÖ Recipe added with ID:", recipeId);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
    if (ingredients) {
      try {
        const parsedIngredients = JSON.parse(ingredients);
        if (!Array.isArray(parsedIngredients)) throw new Error("Invalid ingredients format");

        for (const ingredient of parsedIngredients) {
          if (!ingredient.material_id || !ingredient.quantity) {
            console.warn("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:", ingredient);
            continue;
          }

          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á recipe_ingredients
          await db.query(
            "INSERT INTO recipe_ingredients (recipe_id, material_id, amount) VALUES (?, ?, ?)",
            [recipeId, ingredient.material_id, ingredient.quantity]
          );
          console.log(`‚úÖ Added ingredient: ${ingredient.material_id} (Quantity: ${ingredient.quantity})`);
        }

        console.log("‚úÖ Ingredients added successfully.");
      } catch (parseError) {
        console.error("‚ùå Error parsing ingredients:", parseError);
        return res.status(400).json({ success: false, message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
    } else {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤");
    }

    res.status(201).json({ success: true, message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", recipe_id: recipeId });
  } catch (error) {
    console.error("‚ùå Error adding recipe:", error);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
  }
});

// ‚úÖ **‡∏•‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£**
router.delete("/:id", async (req, res) => {
  const id = Number(req.params.id); // üîß ‡πÅ‡∏õ‡∏•‡∏á ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ID:", id);

  try {
    const [recipe] = await db.query("SELECT * FROM recipes WHERE recipe_id = ?", [id]);
    if (!recipe.length) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
    }

    await db.query("DELETE FROM recipe_ingredients WHERE recipe_id = ?", [id]);
    await db.query("DELETE FROM recipes WHERE recipe_id = ?", [id]);

    res.json({ message: "‚úÖ ‡∏•‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error deleting recipe:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// ‚úÖ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£**
router.put("/:id", upload.single("image"), async (req, res) => {
  const { id } = req.params;
  const { recipe_name, category_id, ingredients } = req.body;
  let imagePath = req.file ? `/uploads/recipes/${req.file.filename}` : null;

  try {
    const [oldRecipe] = await db.query("SELECT image FROM recipes WHERE recipe_id = ?", [id]);
    if (!imagePath && oldRecipe.length > 0) {
      imagePath = oldRecipe[0].image;
    }

    await db.query(
      "UPDATE recipes SET recipe_name = ?, category_id = ?, image = ? WHERE recipe_id = ?",
      [recipe_name, category_id, imagePath, id]
    );

    await db.query("DELETE FROM recipe_ingredients WHERE recipe_id = ?", [id]);

    let ingredientList;
    try {
      ingredientList = JSON.parse(ingredients);
      if (!Array.isArray(ingredientList)) throw new Error("Invalid ingredients format");
    } catch (error) {
      console.error("‚ùå Error parsing ingredients:", error);
      return res.status(400).json({ success: false, message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ingredients ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    for (const ing of ingredientList) {
      await db.query(
        "INSERT INTO recipe_ingredients (recipe_id, material_id, amount) VALUES (?, ?, ?)",
        [id, ing.material_id, ing.quantity]
      );      
    }

    res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (error) {
    console.error("‚ùå Error updating recipe:", error);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
  }
});

// ‚úÖ **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà**
router.get("/", async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const query = `
      SELECT 
        r.recipe_id, 
        r.recipe_name, 
        r.image AS recipe_image, 
        m.menu_image, 
        m.price, 
        c.category_name AS menu_category
      FROM recipes r
      LEFT JOIN menus m ON r.recipe_id = m.recipe_id
      LEFT JOIN menu_categories c ON m.menu_category_id = c.menu_category_id;
    `;
    
    const [recipes] = await db.query(query);
    res.json(recipes); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  } catch (error) {
    console.error("‚ùå Error fetching recipes:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
  }
});


// ‚úÖ **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î**
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const [recipe] = await db.query(
      `SELECT r.recipe_id, r.recipe_name, r.image, r.category_id, c.category_name
       FROM recipes r
       LEFT JOIN categories c ON r.category_id = c.category_id
       WHERE r.recipe_id = ?`, 
      [id]
    );

    if (recipe.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ" });
    }

    const [ingredients] = await db.query(
      `SELECT ri.material_id, 
              m.name AS material_name, 
              c.category_name, 
              ri.amount, 
              u.unit_name
       FROM recipe_ingredients ri
       LEFT JOIN materials m ON ri.material_id = m.material_id  
       LEFT JOIN categories c ON m.category_id = c.category_id
       LEFT JOIN units u ON m.unit_id = u.unit_id  -- üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å units ‡πÄ‡∏õ‡πá‡∏ô unit
       WHERE ri.recipe_id = ?`, 
      [id]
    );    

    res.json({
      ...recipe[0],
      ingredients: ingredients || [],
    });

  } catch (error) {
    console.error("‚ùå Error fetching recipe details:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
  }
});

module.exports = router;
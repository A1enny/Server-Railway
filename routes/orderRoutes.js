const express = require("express");
const router = express.Router();
const db = require("../config/db.js");

module.exports = (io) => {
  router.get("/", async (req, res) => {
    try {
      const sql = `
        SELECT
          o.order_id,
          o.table_id,
          o.total_price,
          o.order_time,
          o.status,
          t.table_number
        FROM orders o
        LEFT JOIN tables t ON o.table_id = t.table_id
        ORDER BY o.order_time DESC
      `;

      const orders = await db.query(sql); // ‡πÉ‡∏ä‡πâ db.query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL
      res.json({ success: true, results: orders });
    } catch (error) {
      console.error("‚ùå Error fetching orders:", error);
      res.status(500).json({ error: "Internal Server Error" });
    }
  });

  router.get("/recent", async (req, res) => {
    try {
      const query = `
      SELECT 
  o.order_id, 
  o.total_price, 
  o.order_time, 
  t.table_number, 
  oi.quantity, 
  oi.subtotal, 
  r.recipe_name, 
  o.status
FROM orders o
JOIN tables t ON o.table_id = t.table_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN menus m ON oi.menu_id = m.menu_id
JOIN recipes r ON m.recipe_id = r.recipe_id 
ORDER BY o.order_time DESC
LIMIT 5;
      `;

      const [recentOrders] = await db.query(query);
      res.json(recentOrders);
    } catch (error) {
      console.error("Error fetching recent orders:", error);
      res.status(500).json({ error: "Internal Server Error" });
    }
  });

  router.get("/:tableId", async (req, res) => {
    const { tableId } = req.params;
    const { guest } = req.query;

    try {
      // ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° subtotal ‡πÅ‡∏•‡∏∞ price
      const query = `
      SELECT 
        oi.order_item_id,
        o.table_id, 
        oi.quantity,  
        oi.subtotal,
        m.price, 
        o.order_time,
        r.recipe_name AS itemName
      FROM order_items oi
      LEFT JOIN orders o ON o.order_id = oi.order_id  
      LEFT JOIN menus m ON oi.menu_id = m.menu_id
      LEFT JOIN recipes r ON m.recipe_id = r.recipe_id
      WHERE o.table_id = ? AND o.status != '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
    `;

      // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL
      const [orders] = await db.query(query, [tableId]);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
      if (orders.length === 0) {
        return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });
      }

      // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      res.json({ success: true, orders, isGuest: guest === "true" });
    } catch (error) {
      console.error("‚ùå Error fetching orders:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
  });

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const checkStockAvailability = async (recipe_id, quantity) => {
    const [ingredients] = await db.query(
      `SELECT ri.material_id, ri.amount * ? AS required, mat.stock 
       FROM recipe_ingredients ri
       JOIN materials mat ON ri.material_id = mat.material_id
       WHERE ri.recipe_id = ?`,
      [quantity, recipe_id]
    );

    return !ingredients.some((i) => i.stock < i.required);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö FIFO
  const reduceStockFIFO = async (recipe_id, quantity) => {
    const connection = await db.getConnection();
    try {
      await connection.beginTransaction();

      // üîç ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
      const [ingredients] = await connection.query(
        `SELECT ri.material_id, ri.amount * ? AS required 
         FROM recipe_ingredients ri
         WHERE ri.recipe_id = ?`,
        [quantity, recipe_id]
      );

      for (const ingredient of ingredients) {
        const { material_id, required } = ingredient;
        let remaining = required;

        while (remaining > 0) {
          // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å
          const [batch] = await connection.query(
            `SELECT batch_id, quantity - used_quantity AS available 
             FROM inventory_batches 
             WHERE material_id = ? AND status = 'available' 
             ORDER BY received_date ASC, batch_id ASC 
             LIMIT 1 LOCK IN SHARE MODE`,
            [material_id]
          );

          if (!batch.length) {
            console.warn(
              `‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${material_id}, ‡πÉ‡∏ä‡πâ stock ‡∏à‡∏≤‡∏Å materials ‡πÅ‡∏ó‡∏ô`
            );

            // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock ‡∏à‡∏≤‡∏Å materials
            const [stockResult] = await connection.query(
              "SELECT stock FROM materials WHERE material_id = ? FOR UPDATE",
              [material_id]
            );

            if (
              !stockResult.length ||
              Number(stockResult[0].stock) < Number(remaining)
            ) {
              console.error(
                `‚ùå ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${material_id}, ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${stockResult[0].stock}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${remaining}`
              );
              throw new Error(`‚ùå ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${material_id}`);
            }

            // üîª ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡∏Ç‡∏≠‡∏á materials
            const stockToUse = Math.min(remaining, stockResult[0].stock);
            await connection.query(
              "UPDATE materials SET stock = GREATEST(stock - ?, 0) WHERE material_id = ?",
              [stockToUse, material_id]
            );

            console.log(
              `‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ${stockToUse} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å materials (material_id: ${material_id})`
            );
            break;
          }

          const { batch_id, available } = batch[0];
          const used = Math.min(remaining, available);
          remaining -= used;

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï
          await connection.query(
            `UPDATE inventory_batches 
             SET used_quantity = used_quantity + ?, 
                 status = CASE WHEN (quantity - used_quantity - ?) <= 0 THEN 'depleted' ELSE 'available' END
             WHERE batch_id = ?`,
            [used, used, batch_id]
          );

          console.log(
            `‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ${used} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å batch_id: ${batch_id} (material_id: ${material_id})`
          );
        }
      }

      await connection.commit();
    } catch (error) {
      await connection.rollback();
      console.error("‚ùå Error reducing stock:", error);
      throw error;
    } finally {
      connection.release();
    }
  };

  // ‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  router.post("/", async (req, res) => {
    const { table_id, menu_id, quantity = 1, price } = req.body;

    if (!table_id || !menu_id || !price) {
      return res
        .status(400)
        .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å
      const [menu] = await db.query(
        `SELECT recipe_id FROM menus WHERE menu_id = ?`,
        [menu_id]
      );
      if (!menu.length)
        return res
          .status(404)
          .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ" });

      const recipe_id = menu[0].recipe_id;
      const isAvailable = await checkStockAvailability(recipe_id, quantity);
      if (!isAvailable) {
        return res
          .status(400)
          .json({ success: false, message: "‚ùå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      const [orderResult] = await db.query(
        `INSERT INTO orders (table_id, total_price, status, session_id) 
           VALUES (?, ?, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°', ?)`,
        [table_id, price * quantity, "session123"]
      );

      const order_id = orderResult.insertId;

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á order_items
      await db.query(
        `INSERT INTO order_items (order_id, menu_id, quantity, subtotal) 
           VALUES (?, ?, ?, ?)`,
        [order_id, menu_id, quantity, price * quantity]
      );

      // ‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö FIFO
      await reduceStockFIFO(recipe_id, quantity);

      io.emit("new_order", { table_id, menu_id, quantity });
      res.status(201).json({ success: true, message: "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
      console.error("‚ùå Error placing order:", error);
      res
        .status(500)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
    }
  });

  router.post("/bulk", async (req, res) => {
    const { table_id, orders, session_id } = req.body;

    if (!table_id || !orders || orders.length === 0) {
      return res
        .status(400)
        .json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    try {
      await db.query("START TRANSACTION");

      let order_id = null;

      // ‚úÖ 1. ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á `order_id` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)
      const [existingOrder] = await db.query(
        `SELECT order_id FROM orders WHERE table_id = ? AND status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°' LIMIT 1`,
        [table_id]
      );

      if (existingOrder.length) {
        order_id = existingOrder[0].order_id;
      } else {
        const [newOrder] = await db.query(
          `INSERT INTO orders (table_id, total_price, status, session_id) 
           VALUES (?, 0, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°', ?)`,
          [table_id, session_id]
        );
        order_id = newOrder.insertId;
      }

      // ‚úÖ 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏á `order_items` ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏á `order_id`
      const orderItemIds = [];

      for (const { menu_id, quantity, price } of orders) {
        console.log("üìå Processing menu_id:", menu_id);

        // ‚úÖ ‡∏î‡∏∂‡∏á recipe_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
        const [menuData] = await db.query(
          "SELECT recipe_id FROM menus WHERE menu_id = ?",
          [menu_id]
        );

        if (!menuData.length) {
          throw new Error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π ${menu_id}`);
        }

        const recipe_id = menuData[0].recipe_id;
        const isAvailable = await checkStockAvailability(recipe_id, quantity);
        if (!isAvailable) {
          throw new Error(`‚ùå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π ${menu_id}`);
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `order_items` ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `order_item_id` ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        const [orderItem] = await db.query(
          `INSERT INTO order_items (order_id, menu_id, quantity, subtotal, table_id, session_id) 
           VALUES (?, ?, ?, ?, ?, ?)`,
          [order_id, menu_id, quantity, price * quantity, table_id, session_id]
        );

        orderItemIds.push(orderItem.insertId);

        // ‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
        await reduceStockFIFO(recipe_id, quantity);
      }

      await db.query("COMMIT");

      io.emit("new_order", { table_id, orders });

      res
        .status(201)
        .json({
          success: true,
          message: "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          order_items: orderItemIds,
        });
    } catch (error) {
      await db.query("ROLLBACK");
      console.error("‚ùå Error placing order:", error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  router.put("/confirm-payment", async (req, res) => {
    const { table_id } = req.body;
    if (!table_id) {
      return res
        .status(400)
        .json({ success: false, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ table_id" });
    }

    try {
      const connection = await db.getConnection();
      await connection.beginTransaction();

      // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      const [orders] = await connection.query(
        `SELECT oi.menu_id, oi.quantity, m.recipe_id 
         FROM orders o 
         JOIN order_items oi ON o.order_id = oi.order_id 
         JOIN menus m ON oi.menu_id = m.menu_id
         WHERE o.table_id = ? AND o.status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°'`,
        [table_id]
      );

      if (orders.length === 0) {
        await connection.rollback();
        return res
          .status(404)
          .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
      }

      // ‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      for (const order of orders) {
        await reduceStockFIFO(order.recipe_id, order.quantity);
      }

      // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
      await connection.query(
        "UPDATE orders SET status = '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß' WHERE table_id = ?",
        [table_id]
      );

      await connection.commit();
      connection.release();

      io.emit("order_paid", { table_id });

      res.json({
        success: true,
        message: "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß",
      });
    } catch (error) {
      await db.query("ROLLBACK");
      console.error("‚ùå Error confirming payment:", error);
      res.status(500).json({
        success: false,
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        error: error.message,
      });
    }
  });

  router.delete("/:orderId", async (req, res) => {
    const { orderId } = req.params;

    if (!orderId) {
      return res
        .status(400)
        .json({ success: false, message: "Order ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    try {
      // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ order_items ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
      await db.query("DELETE FROM order_items WHERE order_id = ?", [orderId]);

      // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
      const [result] = await db.query("DELETE FROM orders WHERE order_id = ?", [
        orderId,
      ]);

      if (result.affectedRows > 0) {
        return res.json({ success: true, message: "‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      } else {
        return res
          .status(404)
          .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" });
      }
    } catch (error) {
      console.error("‚ùå ‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      return res
        .status(500)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
  });

  // ‚úÖ Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏•‡∏ö‡∏ï‡∏≤‡∏° `order_item_id`)
  router.delete("/item/:orderItemId", async (req, res) => {
    const { orderItemId } = req.params;

    try {
        const [result] = await db.query("DELETE FROM order_items WHERE order_item_id = ?", [orderItemId]);

        if (result.affectedRows === 0) {
            return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
        }

        res.json({ success: true, message: "‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
        console.error("‚ùå Error deleting order item:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
});

  return router;
};

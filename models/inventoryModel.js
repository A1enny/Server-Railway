const db = require("../config/db");

const InventoryModel = {
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  async getMaterials({ search = "%", category = "%", limit = 10, offset = 0 }) {
    const [[{ total }]] = await db.query(
      `SELECT COUNT(*) AS total 
       FROM materials 
       WHERE name LIKE ? 
       AND (category_id = ? OR ? = '%')`,
      [search, category, category]
    );

    const [rows] = await db.query(
      `SELECT 
        m.material_id, 
        m.name AS material_name, 
        c.category_name, 
        COALESCE(MIN(ib.received_date), m.received_date, 'N/A') AS received_date, 
        COALESCE(
          MIN(ib.expiration_date), 
          DATE_ADD(COALESCE(MIN(ib.received_date), m.received_date), INTERVAL sl.shelf_life_days DAY), 
          'N/A'
        ) AS expiration_date, 
        u.unit_name,
        SUM(m.stock) AS total_quantity,
        CASE 
          WHEN SUM(m.stock) <= 0 THEN '‡∏´‡∏°‡∏î'
          WHEN SUM(m.stock) <= m.min_stock THEN '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
          WHEN COALESCE(MIN(ib.expiration_date), 
            DATE_ADD(COALESCE(MIN(ib.received_date), m.received_date), INTERVAL sl.shelf_life_days DAY)
          ) <= CURDATE() THEN '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
          WHEN COALESCE(MIN(ib.expiration_date), 
            DATE_ADD(COALESCE(MIN(ib.received_date), m.received_date), INTERVAL sl.shelf_life_days DAY)
          ) BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) THEN '‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'
          ELSE '‡∏õ‡∏Å‡∏ï‡∏¥'
        END AS status
      FROM materials m
      LEFT JOIN categories c ON m.category_id = c.category_id
      LEFT JOIN inventory_batches ib ON m.material_id = ib.material_id
      LEFT JOIN unit u ON m.unit_id = u.unit_id
      LEFT JOIN shelf_life sl ON m.category_id = sl.category_id
      WHERE m.name LIKE ? 
        AND (m.category_id = ? OR ? = '%')
      GROUP BY m.material_id, m.name, c.category_name, u.unit_name, m.received_date, m.min_stock, sl.shelf_life_days
      ORDER BY m.material_id ASC
      LIMIT ? OFFSET ?;`,
      [search, category, category, limit, offset]
    );

    return { total, rows };
  },

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ï‡∏≤‡∏° ID
  async getMaterialById(id) {
    const [rows] = await db.query(
      `SELECT m.*, u.unit_name FROM materials m
       LEFT JOIN unit u ON m.unit_id = u.unit_id
       WHERE m.material_id = ?`,
      [id]
    );
    return rows.length > 0 ? rows[0] : null;
  },

  async addMaterial(req) {
    // ‚¨ÖÔ∏è ‡∏£‡∏±‡∏ö req ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ destructure ‡∏ï‡∏£‡∏á‡πÜ
    console.log("Received data in Backend:", req.body);

    const {
      name,
      category_id,
      quantity,
      received_date,
      expiration_date,
      price,
      unit,
    } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ unit_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const unitMap = { ‡∏Å‡∏£‡∏±‡∏°: 1, ‡∏ü‡∏≠‡∏á: 2, ‡∏Ç‡∏ß‡∏î: 3, ‡πÅ‡∏Å‡πâ‡∏ß: 4 };
    const unit_id = unitMap[unit]; // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô ID

    if (!unit_id) {
      console.error("‚ùå unit_id is missing");
      throw new Error("‚ùå unit_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    const connection = await db.getConnection();
    try {
      await connection.beginTransaction();

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô `materials`
      const [insertResult] = await connection.query(
        `INSERT INTO materials (name, category_id, unit_id) VALUES (?, ?, ?)`,
        [name, category_id, unit_id]
      );
      const materialId = insertResult.insertId;

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô `inventory_batches`
      await this.addInventoryBatch(connection, {
        material_id: materialId,
        quantity,
        received_date,
        expiration_date,
        price,
      });

      await connection.commit();
      return materialId;
    } catch (error) {
      await connection.rollback();
      console.error("‚ùå Error adding material:", error);
      throw new Error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      connection.release();
    }
  },

  /// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° `inventory_batches` ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  async addInventoryBatch(
    connection,
    { material_id, quantity, received_date, expiration_date, price }
  ) {
    try {
      console.log("üìù Adding to inventory_batches:", {
        material_id,
        quantity,
        received_date,
        expiration_date,
        price,
      });

      await connection.query(
        `INSERT INTO inventory_batches (material_id, quantity, received_date, expiration_date, price) 
       VALUES (?, ?, ?, ?, ?)`,
        [material_id, quantity, received_date, expiration_date, price]
      );

      console.log("‚úÖ Inventory batch added successfully");
    } catch (error) {
      console.error("‚ùå Error adding inventory batch:", error);
      throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô inventory_batches ‡πÑ‡∏î‡πâ");
    }
  },

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  async getUsageStatistics() {
    try {
      console.log("üìä Fetching usage statistics...");

      const [rows] = await db.query(`
      SELECT material_id, SUM(quantity_used) AS total_used
      FROM usage_logs
      GROUP BY material_id
      ORDER BY total_used DESC
    `);

      console.log("‚úÖ Usage statistics retrieved:", rows);
      return rows;
    } catch (error) {
      console.error("‚ùå Error fetching usage statistics:", error);
      throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
    }
  },

  // ‚úÖ ‡∏î‡∏∂‡∏á unit_id ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ cache)
  async getUnitId(unitName) {
    try {
      console.log(`üîç Searching for unit_id of '${unitName}'...`);

      const [rows] = await db.query(
        "SELECT unit_id FROM unit WHERE unit_name = ?",
        [unitName]
      );

      if (rows.length === 0) {
        console.error(`‚ùå Unit '${unitName}' not found in database`);
        throw new Error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢ '${unitName}' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
      }

      console.log(
        `‚úÖ Found unit_id: ${rows[0].unit_id} for unit '${unitName}'`
      );
      return rows[0].unit_id;
    } catch (error) {
      console.error("‚ùå Error fetching unit_id:", error);
      throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• unit_id ‡πÑ‡∏î‡πâ");
    }
  },

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  async getMostUsedMaterials() {
    try {
      console.log("üìå Fetching most used materials...");

      const [rows] = await db.query(`
      SELECT m.material_id, m.name, COALESCE(SUM(o.quantity_used), 0) AS total_used
      FROM materials m
      LEFT JOIN order_items o ON o.material_id = m.material_id
      GROUP BY m.material_id
      ORDER BY total_used DESC
      LIMIT 10
    `);

      console.log("‚úÖ Most used materials retrieved:", rows);
      return rows;
    } catch (error) {
      console.error("‚ùå Error fetching most used materials:", error);
      throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ");
    }
  },

  // ‚úÖ ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  async deleteMaterial(id) {
    await db.query("DELETE FROM materials WHERE material_id = ?", [id]);
    return true;
  },

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  async getMaterialBatches(materialId) {
    const [rows] = await db.query(
      `
      SELECT batch_id, received_date, expiration_date, quantity 
      FROM inventory_batches 
      WHERE material_id = ? 
      ORDER BY received_date DESC`,
      [materialId]
    );
    return rows;
  },

  // ‚úÖ ‡∏•‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  async deleteBatch(batchId) {
    await db.query(`DELETE FROM inventory_batches WHERE batch_id = ?`, [
      batchId,
    ]);
  },
};

module.exports = InventoryModel;
